#!/usr/bin/env python

import sys
import argparse
import numpy as np
from sculptor.specfitgui import SpecFitGui
from sculptor.speconed import SpecOneD
from PyQt5 import QtWidgets

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="""
           Sculptor - A GUI for interactive modelling of astronomic 
           electromagnetic spectra 
            """,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('-f', '--filename', required=False, type=str,
                        default=None,
                        help='Filename of spectrum to model. The spectrum must '
                             'be in a filetype that can be understood by the'
                             ' SpecOneD class.')

    parser.add_argument('-z', '--redshift', required=False, type=float,
                        default=0,
                        help='Cosmological redshift of the astronomical object')

    return parser.parse_args()


if __name__ == '__main__':

    args = parse_arguments()

    spec = None

    if args.filename is not None:
        spec = SpecOneD()
        # Reading the spectrum
        if args.filename.split('.')[1] == 'fits':

            try:
                spec.read_from_fits(filename=args.filename, unit='f_lam')
            except:
                print('[WARNING] Spectrum could not be read, assuming the '
                      'standard IRAF format.')
                spec = None

            try:
                spec.read_pypeit_fits(filename=args.filename, unit='f_lam')
            except:
                print('[WARNING] Spectrum could not be read, assuming the '
                      'PypeIt format.')
                spec = None

        elif args.filename.split('.')[1] == 'hdf5':

            try:
                spec.read_from_hdf(filename=args.filename)
            except:
                print('[WARNING] Spectrum could not be read, assuming the '
                      'SpecOneD hdf5 format.')
                spec = None

        else:

            try:
                print('[INFO] Assuming to read spectrum from a text file with the '
                      'columns 0=dispersion, 1=flux, 2=flux error')

                data = np.genfromtxt(args.filename)

                spec = SpecOneD(dispersion=data[:,0],
                                flux=data[:,1],
                                flux_err=data[:,2],
                                unit='f_lam')
            except:
                print('[WARNING] Spectrum could not be read!')
                spec = None


        if spec is None:
            raise ValueError('[ERROR] Spectrum could not be read.')

    app = QtWidgets.QApplication(sys.argv)
    form = SpecFitGui(spectrum=spec, redshift=args.redshift)
    form.show()
    app.exec_()




