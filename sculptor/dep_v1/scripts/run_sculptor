#!/usr/bin/env python


import sys
import argparse
import numpy as np
import importlib_resources
from sculptor.dep_v1.specfitgui import SpecFitGui
from sculptor.dep_v1.speconed import SpecOneD
from PyQt5 import QtWidgets


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="""
           Sculptor - A GUI for interactive modelling of astronomic 
           electromagnetic spectra 
            """,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('-f', '--filename', required=False, type=str,
                        default=None,
                        help='Filename of spectrum to model. The spectrum must '
                             'be in a filetype that can be understood by the'
                             ' SpecOneD class.')

    parser.add_argument('-z', '--redshift', required=False, type=float,
                        default=0,
                        help='Cosmological redshift of the astronomical object')

    parser.add_argument('-ex', '--example', required=False, type=bool,
                        default=False, help='Starting up the GUI with the '
                                            'example spectrum. This '
                                            'overwrites any filename keywords')

    return parser.parse_args()


if __name__ == '__main__':

    args = parse_arguments()

    spec = None

    if args.example:
        ref = importlib_resources.files('sculptor') / 'data/example_spectra/J030341.04-002321.8_0.fits'
        args.filename = ref.as_posix()
        args.redshift = 3.227

    if args.filename is not None:
        spec = SpecOneD()
        # Reading the spectrum
        if args.filename.split('.')[-1] == 'fits':

            try:
                spec.read_from_fits(filename=args.filename)
                print('[INFO] Spectrum read in assuming the '
                      'standard IRAF format.')
            except:
                print('[WARNING] Spectrum could not be read assuming the '
                      'standard IRAF format.')

            try:
                spec.read_pypeit_fits(filename=args.filename)
                print('[INFO] Spectrum read in assuming the '
                      'standard PypeIt format.')
            except:
                print('[WARNING] Spectrum could not be read assuming the '
                      'PypeIt format.')

            try:
                spec.read_sdss_fits(args.filename)
                print('[INFO] Spectrum read in assuming the '
                      'standard SDSS format.')
            except:
                print('[WARNING] Spectrum could not be read assuming the '
                      'SDSS format.')

        elif args.filename.split('.')[-1] == 'hdf5':

            try:
                spec.read_from_hdf(filename=args.filename)
                print('[INFO] Spectrum read in assuming the '
                      'standard SpecOneD hdf5 format.')
            except:
                print('[WARNING] Spectrum could not be read assuming the '
                      'SpecOneD hdf5 format.')

        else:

            try:
                print('[INFO] Assuming to read spectrum from a text file with the '
                      'columns 0=dispersion, 1=flux density , 2=flux density '
                      'error')

                data = np.genfromtxt(args.filename)

                spec = SpecOneD(dispersion=data[:,0],
                                fluxden=data[:, 1],
                                fluxden_err=data[:, 2],
                                unit='f_lam')
            except:
                print('[WARNING] Spectrum could not be read!')


        if spec is None:
            raise ValueError('[ERROR] Spectrum could not be read.')

    app = QtWidgets.QApplication(sys.argv)
    form = SpecFitGui(spectrum=spec, redshift=args.redshift)
    form.show()
    app.exec_()
